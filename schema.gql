# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""Deep health check response."""
type Health {
  """If health is OK."""
  ok: Boolean!
}

"""An item of data."""
type Item {
  """When this item was created."""
  createdAt: DateTime!

  """Item ID."""
  id: String!

  """Name of the item."""
  name: String!

  """Type of the item."""
  type: String!

  """When this item was updated."""
  updatedAt: DateTime!
}

input ItemOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum ItemScalarFieldEnum {
  createdAt
  id
  name
  type
  updatedAt
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ItemWhereUniqueInput {
  id: String
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  """Deep health check."""
  health: Health!
  item(where: ItemWhereUniqueInput!): Item
  items(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): [Item!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
